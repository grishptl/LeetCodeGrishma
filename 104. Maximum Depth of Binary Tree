  ###############RECURSIVE##############      

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        if root == None:
            return 0
        result =1
        if root.val != None:
            result=result+ max(self.maxDepth(root.left),self.maxDepth(root.right))
        return result
  ###############ITERATIVE##############      
 # Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        """if root == None:
            return 0
        result =1
        if root.val != None:
            result=result+ max(self.maxDepth(root.left),self.maxDepth(root.right))
        return result
        """
        if root == None:
            return 0
        stack =[[root,1]]
        depth=1
        while stack:
            CurrNode,Currdepth = stack.pop()
            #print(CurrNode,Currdepth)
            
            if CurrNode:
                depth = max(depth,Currdepth)
                stack.append([CurrNode.left,Currdepth+1])
                stack.append([CurrNode.right,Currdepth+1])
        return depth
            
            
            
