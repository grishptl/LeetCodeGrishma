# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        """
        #pick random number and keep updating visited node 
        #return True if same value found
        while head and head.next:
            if head.next.val == -199191:
                return True
            head.val = -199191
            head = head.next
        return False
        """
        
        #Approach 2
        if head is None:
            return False
        slow = head
        fast = head.next
        while slow != fast:
            if fast== None or fast.next == None:
                return False
            slow = slow.next
            fast = fast.next.next
        return True
            
            
