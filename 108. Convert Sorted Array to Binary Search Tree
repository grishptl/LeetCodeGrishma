# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:
        def maketree(left, right):
            if left>right:
                return None
            mid = (left+right)//2
            
            root= TreeNode(nums[mid])
            
            root.left = maketree(left, mid-1)
            root.right= maketree(mid+1,right)
            return root
            
        return maketree(0,len(nums)-1)
    #time: O(n), space: o(logn) bcz height of our tree and it's always balanced
            
        
